#Définition du port d'entrée

input {
	 beats {
		port => 5044
		#congestion_threshold => 25
		ssl => false
		#ssl => true
		#ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
		#ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
	}
}

#Traitement des Logs EOL Apache

filter {

	mutate {
		#rename => { "[host][name]" => "[hostname]" }
		#remove_field => ["host"]
	}
	if [application] == "EOL"{
		grok {
			match => ["source", "/home/cms/log/%{DATA:program}.log"]
		}
		mutate {
		#	remove_tag => ["beats_input_codec_plain_applied" ]
		#	remove_field => [ "beat.hostname" , "beat.name" ]
			add_field => ["log_type" , "%{[program]}"]
		}
	}

# Fichier httpd.access

	if [log_type] == "httpd.access" {
		grok {
			tag_on_failure => ["_grok_apache-access_error"]
			match => { "message" => "\[%{DATA:client_ip}\] %{DATA:ident} %{DATA:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes:int}|-) %{DATA:referer} \"%{GREEDYDATA:agent}\" %{GREEDYDATA:captured_request_headers}"}
		}
		mutate {
			#add_field => { "program" => "apache" }
			convert => { "bytes" => "integer" }
		}
		#gestion Double IP dans XforwardedFor
		grok {
			match => { "client_ip" => "%{GREEDYDATA:client_ip_temp}, %{GREEDYDATA:client_proxy_ip}" }
		}
		if [client_ip_temp] {
		    mutate {
				replace => { "client_ip" => "%{client_ip_temp}"}
				remove_field => [ "client_ip_temp" ]
		    }
		}
		#grok {
		#	match => { "client_ip" => "%{GREEDYDATA:client_ip}, %{GREEDYDATA:client_proxy_ip}, %{GREEDYDATA:client_proxy_ip2}" }
		#}
		#if [clientip2] {
		#	mutate {
		#		replace => { "clientip" => "%{clientip2}" }
		#	}
		#}
		#if [clientip3] {
		#	mutate {
		#		replace => { "clientip" => "%{clientip3}" }
		#	}
		#}
		date {
			#Format ORI -> 06/Dec/2016:11:57:16 +0100
			match => [ "timestamp" , "MMM dd HH:mm:ss", "dd/MMM/yyyy:HH:mm:ss +0SSS" ]
			remove_field => [ "timestamp" ]
		}
	}

# Fichier httpd.error

	if [log_type] == "httpd.error" {
		grok {
			#match => { "message" => "%{HTTPD24_ERRORLOG} \[%{DATA:client_ip}\]" }
			match => { "message" => "\[%{HTTPDERROR_DATE:timestamp}\] \[%{WORD:module}:%{LOGLEVEL:loglevel}\] \[pid %{POSINT:pid}:tid %{NUMBER:tid}\]( \(%{POSINT:proxy_errorcode}\)%{DATA:proxy_errormessage}:)?( \[client %{IPORHOST:client}:%{POSINT:clientport}\])? %{DATA:errorcode}: %{GREEDYDATA:message_code} \[%{DATA:client_ip}\] %{GREEDYDATA:source_domaine}" }
		}
		grok {
			match => { "message_code" => "%{DATA:php_message}, referer %{GREEDYDATA:referer}" }
		}
		date {
			#Format ORI -> Tue Dec 06 14:01:37.186667 2016
			match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
		remove_field => [ "timestamp" ]
		}
	}

	if [log_type] == "php.error" {
		grok {
			tag_on_failure => ["_grok_php_error"]
				#match => { "message" => "\[%{GREEDYDATA:timestamp} %{GREEDYDATA:timezone}\] PHP %{GREEDYDATA:temp_message}" }
				match => { "message" => "\[%{GREEDYDATA:timestamp}\] %{GREEDYDATA:log_lvl}: %{GREEDYDATA:pool_and_child} said into stderr: \"%{GREEDYDATA:error_message}\"" }
				remove_field => [ "timezone" ]
				#remove_field => [ "message" ]
			}
		mutate {
			rename => { "temp_message" => "message"}
		}
		date {
			match => [ "timestamp" , "dd-MMM-YYYY HH:mm:ss" ]
			remove_field => [ "timestamp" ]
		}
	}
	if [source] == "/home/cms/log/php-fpm.status.log" {
		json {
			source => "message"
		}
	}	
}

#Sortie

output {
	elasticsearch {
		hosts => ["127.0.0.1:9200"]
		sniffing => true
		manage_template => true
		index => "eol-%{+YYYY.MM.dd}"
		#document_type => "Custom"
	}
        if [source] == "/home/mysql/log/slow-queries.log" {
                udp {
                        host => "192.168.25.1"
			port => "5961"
                        codec => json
                }
        }
        if [source] == "/home/cms/log/httpd.error.log" {
                udp {
                        host => "192.168.25.1"
                        port => "5961"
                        codec => json
                }
        }
        if [source] == "/home/cms/log/php-fpm.status.log" {
                udp {
                        host => "192.168.25.1"
                        port => "5961"
                        codec => json
                }
        }
}
