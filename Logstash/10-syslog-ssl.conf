input {
    tcp {
            port => 10514
            mode => "server"
            ssl_enable => true                
            ssl_cert => "/etc/logstash/config/keys/machine-cert.pem"
            #ssl_extra_chain_certs => "/etc/logstash/config/keys/ca.pem"
            ssl_certificate_authorities => "/etc/logstash/config/keys/ca.pem"
	    ssl_key => "/etc/logstash/config/keys/machine-key.pem"                
            ssl_verify => false
            add_field => {                    
                    "logsourcetype" => "linux"
            }
        }
}
filter{
	mutate {
		remove_field => ["sslsubject","logsourcetype","port"]		
	}
	
	grok {
		tag_on_failure => ["_grok_rsyslog_notparsed"]
		match => ["message", '^(\<[0-9]+\>)?%{SYSLOGTIMESTAMP:@timestamp} %{SYSLOGHOST:sysloghost} %{PROG:program}([:])?(\[%{POSINT:pid}\])?([:])? %{DATA:syslogmessage}$']		
	}	
	if "_grok_rsyslog_notparsed" not in [tags] {
		mutate {remove_field => ["message"]}
	}
	if [host] == "37.59.165.129" {
		mutate {add_field => { "aloha" => "OVH" }}
		mutate {update => { "sysloghost" => "OVH_%{sysloghost}" }}
	}
	if [host] == "149.7.101.237" {
		mutate {add_field => { "aloha" => "ARUMTEC" }}
		mutate {update => { "sysloghost" => "ARU_%{sysloghost}" }}
	}
	if [host] == "129.185.69.191" {
		mutate {add_field => { "aloha" => "ATOS" }}
		mutate {update => { "sysloghost" => "ATOS_%{sysloghost}" }}
	}
       if [host] == "10.10.102.240" {
                mutate {add_field => { "aloha" => "ATOS" }}
                mutate {update => { "sysloghost" => "ATOS_%{sysloghost}" }}
        }	
	if [program] {
		mutate {gsub => [ "program", "\:$", "" ]}
		if [program] == "httpd" {
			mutate{
				update => { "program" => "waf" }
			}
		}
		if [program] == "haproxy" {
			mutate{
				update => { "program" => "hawaf" }
			}
		}
		if [program] == "status" {
			grok {
				tag_on_failure => ["_grok_status_notparsed"]
				match => ["syslogmessage", '\[avg:%{NUMBER:avg}\]\ \[ram-free:%{INT:ram-free}\]\ \[swap-free:%{INT:swap-free}\]\ \[process-count:%{INT:process-count}\]\ \[socket-count:%{INT:socket-count}\]']		
			}
			mutate {				
				convert => ["avg", "float"]
				convert => ["ram-free", "integer"]
				convert => ["swap-free", "integer"]
				convert => ["process-count", "integer"]				
				convert => ["socket-count", "integer"]	
			}
			if [ram-free] {
				ruby {
					code => "event.set('ram-free',event.get('ram-free').to_i*1024)"
				}
			}
			if [swap-free] {
				ruby {
					code => "event.set('swap-free',event.get('swap-free').to_i*1024)"
				}
			}
			
		}
	}	
}
output {	
	if [program] == "waf" {
		udp{
        		host=>"127.0.0.1"
        		port=>"50010"    
        		codec=>"json_lines"
    		}
    		#file{
    		#    path => "/home/waf.json"
    		#    codec => "json_lines"
    		#}
	}else if [program] == "hawaf" {
		udp{
        		host=>"127.0.0.1"
        		port=>"50011"    
        		codec=>"json_lines"
		}
    		#file{
        	#    path => "/home/hawaf.json"
        	#    codec => "json"
    		#}
        } else{
		elasticsearch {
			hosts => ["127.0.0.1:9200"]
			index => "syslog-%{+YYYY.MM.dd}"			
		}
	}
        #elasticsearch {
        #     hosts => ["127.0.0.1:9200"]
        #     index => "syslog-%{+YYYY.MM.dd}"
        #}

}
