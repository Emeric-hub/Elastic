input {
	udp {
        port => 50010
        codec => "json_lines"
        tags => ["waf"]
    }
}
filter{
	grok {
		tag_on_failure => ["_grok_httpd_notparsed1"]
		#match => ["syslogmessage", '^\[%{HTTPDERROR_DATE:timestamp}\] \[(\:)?%{NOTSPACE:apacheseverity}\] \[pid %{POSINT:pid}\] \[client %{IPORHOST:client_ip}\:%{POSINT:tcp}\] \[client %{IPORHOST:client_ip2}\] ModSecurity: %{NOTSPACE:modsecseverity}\. %{GREEDYDATA:modsecmessage} \[file %{QUOTEDSTRING:rulefile}\] \[line %{QUOTEDSTRING:ruleline}\] (?:\[offset %{QUOTEDSTRING:matchoffset}\] )?(?:\[id %{QUOTEDSTRING:ruleid}\] )?(?:\[rev %{QUOTEDSTRING:rulerev}\] )?(?:\[msg %{QUOTEDSTRING:rulemessage}\] )?(?:\[data %{QUOTEDSTRING:ruledata}\] )?(?:\[severity %{QUOTEDSTRING:ruleseverity}\] )?(?:\[ver %{QUOTEDSTRING:rulesversion}\] )?(?:\[maturity %{QUOTEDSTRING:rulesmaturity}\] )?(?:\[accuracy %{QUOTEDSTRING:rulesaccuracy}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[hostname %{QUOTEDSTRING:domain}\] )?(?:\[uri %{QUOTEDSTRING:uri_path}\] )?(?:\[unique_id %{QUOTEDSTRING:unique_id}\] )?(?:\[%{NOTSPACE:X_TAIGA_ID}\])?.*$']
		match => ["syslogmessage", '^\[%{HTTPDERROR_DATE:timestamp}\] \[(\:)?%{NOTSPACE:apacheseverity}\] \[pid %{POSINT:pid}\] \[client %{IPORHOST:client_ip}\:%{POSINT:tcp}\] \[client %{IPORHOST:client_ip2}\] ModSecurity: %{NOTSPACE:modsecseverity}\. %{GREEDYDATA:modsecmessage} \[file \"%{DATA:rulefile}\"\](?: \[line \"%{DATA:ruleline}(")?(\])?)?(?: \[offset \"%{DATA:matchoffset}(\"\])?)?(?: \[id \"%{DATA:ruleid}(\"\])?)?(?: \[rev \"%{DATA:rulerev}(\"\])?)?(?: \[msg \"%{DATA:rulemessage}(\"\])?)?(?: \[data \"%{DATA:ruledata}(\"\])?)?(?: \[severity \"%{DATA:ruleseverity}(\"\])?)?(?: \[ver \"%{DATA:rulesversion}(\"\])?)?(?: \[maturity \"%{DATA:rulesmaturity}(\"\])?)?(?: \[accuracy \"%{DATA:rulesaccuracy}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[hostname \"%{DATA:domain}(\"\])?)?(?: \[uri \"%{DATA:uri_path}(\"\])?)?(?: \[unique_id \"%{DATA:unique_id}(\"\])?)? \[%{NOTSPACE:X_TAIGA_ID}\].*$']


# TODO amelioration Grok pour timeout :
#  ^\[%{HTTPDERROR_DATE:timestamp}\] \[(\:)?%{NOTSPACE:apacheseverity}\] \[pid %{POSINT:pid}\] \[client %{IPORHOST:client_ip}\:%{POSINT:tcp}\] \[client %{IPORHOST:client_ip2}\] ModSecurity: %{NOTSPACE:modsecseverity}\. %{GREEDYDATA:modsecmessage} \[file \"%{NOTSPACE:rulefile}\"\](?: \[line \"%{INT:ruleline}(")?(\])?)?(?: \[offset \"%{INT:matchoffset}(\"\])?)?(?: \[id \"%{INT:ruleid}(\"\])?)?(?: \[rev \"%{DATA:rulerev}(\"\])?)?(?: \[msg \"%{DATA:rulemessage}(\"\])?)?(?: \[data \"%{DATA:ruledata}(\"\])?)?(?: \[severity \"%{NOTSPACE:ruleseverity}\"\])?(?: \[ver \"%{NOTSPACE:rulesversion}\"\])?(?: \[maturity \"%{DATA:rulesmaturity}(\"\])?)?(?: \[accuracy \"%{DATA:rulesaccuracy}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[hostname \"%{NOTSPACE:domain}\"\]?)?(?: \[uri \"%{NOTSPACE:uri_path}\"\])?(?: \[unique_id \"%{NOTSPACE:unique_id}\"\])? \[%{NOTSPACE:X_TAIGA_ID}\].*$^\[%{HTTPDERROR_DATE:timestamp}\] \[(\:)?%{NOTSPACE:apacheseverity}\] \[pid %{POSINT:pid}\] \[client %{IPORHOST:client_ip}\:%{POSINT:tcp}\] \[client %{IPORHOST:client_ip2}\] ModSecurity: %{NOTSPACE:modsecseverity}\. %{GREEDYDATA:modsecmessage} \[file \"%{NOTSPACE:rulefile}\"\](?: \[line \"%{INT:ruleline}(")?(\])?)?(?: \[offset \"%{INT:matchoffset}(\"\])?)?(?: \[id \"%{INT:ruleid}(\"\])?)?(?: \[rev \"%{DATA:rulerev}(\"\])?)?(?: \[msg \"%{DATA:rulemessage}(\"\])?)?(?: \[data \"%{DATA:ruledata}(\"\])?)?(?: \[severity \"%{NOTSPACE:ruleseverity}\"\])?(?: \[ver \"%{NOTSPACE:rulesversion}\"\])?(?: \[maturity \"%{DATA:rulesmaturity}(\"\])?)?(?: \[accuracy \"%{DATA:rulesaccuracy}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[tag \"%{DATA:rulestags}(\"\])?)?(?: \[hostname \"%{NOTSPACE:domain}\"\]?)?(?: \[uri \"%{NOTSPACE:uri_path}\"\])?(?: \[unique_id \"%{NOTSPACE:unique_id}\"\])? \[%{NOTSPACE:X_TAIGA_ID}\].*$

	}
	if "_grok_httpd_notparsed1" not in [tags] {		
		#if "_grok_httpd_notparsed1" in [tags] {
		#	grok {
		#		tag_on_failure => ["_grok_httpd_notparsed2"]
		#		match => ["syslogmessage", '^\[%{HTTPDERROR_DATE:timestamp}\] \[(\:)?%{NOTSPACE:apacheseverity}\] \[pid %{POSINT:pid}(\:tid %{POSINT:tid})?\] \[client %{IPORHOST:client_ip}\:%{POSINT:tcp}\] \[client %{IPORHOST:client_ip2}\] ModSecurity: %{NOTSPACE:modsecseverity}\. %{GREEDYDATA:modsecmessage} \[file %{QUOTEDSTRING:rulefile}\] \[line %{QUOTEDSTRING:ruleline}\] (?:\[offset %{QUOTEDSTRING:matchoffset}\] )?(?:\[id %{QUOTEDSTRING:ruleid}\] )?(?:\[rev %{QUOTEDSTRING:rulerev}\] )?(?:\[msg %{QUOTEDSTRING:rulemessage}\] )?(?:\[data %{QUOTEDSTRING:ruledata}\] )?(?:\[severity %{QUOTEDSTRING:ruleseverity}\] )?(?:\[ver %{QUOTEDSTRING:rulesversion}\] )?(?:\[maturity %{QUOTEDSTRING:rulesmaturity}\] )?(?:\[accuracy %{QUOTEDSTRING:rulesaccuracy}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[tag %{QUOTEDSTRING:rulestags}\] )?(?:\[hostname %{QUOTEDSTRING:domain}\] )?(?:\[uri %{QUOTEDSTRING:uri_path}\] )?(?:\[unique_id %{QUOTEDSTRING:unique_id}\])?(?:\[%{NOTSPACE:haproxyid}\])?.*$']
		#	}
		#}
		
		#mutate {			
		#	gsub => [ 
		#		"ruleid", "^.{1}", "" , "ruleid", ".{1}$", "" ,
		#		"rulefile", "^.{1}", "" , "rulefile", ".{1}$", "" ,
		#		"ruleline", "^.{1}", "" , "ruleline", ".{1}$", "" ,
		#		"rulerev", "^.{1}", "" , "rulerev", ".{1}$", "" ,
		#		"rulesmaturity", "^.{1}", "" , "rulesmaturity", ".{1}$", "" ,
		#		"ruledata", "^.{1}", "" , "ruledata", ".{1}$", "" ,
		#		"rulesversion", "^.{1}", "" , "rulesversion", ".{1}$", "" ,
		#		"rulemessage", "^.{1}", "" , "rulemessage", ".{1}$", "" ,
		#		"rulesaccuracy", "^.{1}", "" , "rulesaccuracy", ".{1}$", "" ,
		#		"ruleseverity", "^.{1}", "" , "ruleseverity", ".{1}$", "" ,
		#		"rulestags", "^.{1}", "" , "rulestags", ".{1}$", "" ,
		#		"domain", "^.{1}", "" , "domain", ".{1}$", "",
		#		"uri_path", "^.{1}", "" , "uri_path", ".{1}$", "",
		#		"unique_id", "^.{1}", "" , "unique_id", ".{1}$", ""
		#	]
		#}
		
		if [client_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
			geoip {
				source => "client_ip"
				database => "/etc/logstash/config/GeoLite2-City.mmdb"
			}
			if ![geoip] {
				geoip {
					source => "client_ip"						
					database => "/etc/logstash/config/GeoLite2-Country.mmdb"
				}
			}
			if ![geoip] {
				geoip {
					source => "client_ip"						
					database => "/etc/logstash/config/GeoLite2-ASN.mmdb"
				}
			}
			if ![geoip][country_name] and [geoip][continent_code] {
				mutate{
					add_field => { "geoip[country_name]" => "%{geoip[continent_code]}" }
				}
			}
		}else{
			mutate{
				add_field => { "geoip[lan]" => "private" }
				add_field => { "geoip[ip]" => "%{[client_ip]}" }
			}
		}
			
		if [rulestags] {
			ruby {
				code => '
					rulestags=event.get("[rulestags]")
					if rulestags.kind_of?(String)
						rulestags=[rulestags]
					end
					rulestags.collect{|tag|
						if tag.match(/^OWASP_CRS\/.*$/i) 
							oc=tag.split("/")
							event.set("[owaspClassification1]",oc[1])
							event.set("[owaspClassification2]",oc[2])
						end
						if tag.match(/^WASCTC\/.*$/i) 
							w=tag.split("/")
							event.set("[wasctc]",w[1])
						end
						if tag.match(/^OWASP_TOP_10\/.*$/i) 
							ot=tag.split("/")
							event.set("[owaspTop10]",ot[1])
						end
					}
					rulestags.delete_if{|tag|
						tag.match(/^OWASP_CRS\/.*$/i) || tag.match(/^WASCTC\/.*$/i) || tag.match(/^OWASP_TOP_10\/.*$/i)
					}
					event.set("[rulestags]",rulestags)
					'
						
			}
		}
		
		if [ruleseverity] =~ "^C.*$" {
			mutate{update => { "ruleseverity" => "CRITICAL"}}
		}else if [ruleseverity] =~ "^W.*$" {
			mutate{update => { "ruleseverity" => "WARNING"}}
		}else if [ruleseverity] =~ "^N.*$" {
			mutate{update => { "ruleseverity" => "NOTICE"}}
		}
		
		if [X_TAIGA_ID] {
			mutate {	
				remove_tag => [ "waf" ] 
				#remove_field => [ 
				#		"syslogmessage","sysloghost","host","frontend_name","pid","port","tcp","unique_id","tags","client_ip","client_ip2"					
				#]
			}		
		}
		######################################################## REMOVE ONLY CHECK
		#mutate {			
		#	remove_field => [ "geoip","user-agent" ]
		#}
	}
}
output {
	#stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["127.0.0.1:9200"]
		sniffing => true
#		manage_template => true
#		template_overwrite => true
#		template => "/etc/logstash/config/template/waf.json"
#		template_name => "waf"
		index => "waf-%{+YYYY.MM.dd}"
		
	}
	#redis {
	#	host => "192.168.25.1:6379" # INDEXER_HOSTNAME
	#	data_type => "list"
	#	key => "waf"
	#	codec => json
	#}
        udp {
                host => "192.168.25.1" # INDEXER_HOSTNAME
                port => "5965"
                codec => json
        }
}
