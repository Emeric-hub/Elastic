input {
	udp {
		port => 50011
		codec => "json_lines"
	}
}
filter{

#Grok Initial - Haproxy Format CHU
# Config Aloha :
# log-format                    %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %U\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r\ [TID:%ID]\ [SSL:%sslv/%sslc]

 	grok {
                patterns_dir => ["/etc/logstash/config/patterns.d/haproxy.grok"]
                match => ["syslogmessage", '^%{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:ft} %{NOTSPACE:bk}/%{NOTSPACE:server} %{INT:Tq}/%{INT:Tw}/%{INT:Tc}/%{INT:Tr}/%{NOTSPACE:Tt} %{INT:http_status_code} %{NOTSPACE:BytesRead} (%{NOTSPACE:BytesUpload} )?%{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{DATA:captured_request_headers}\|%{DATA:x_forwarded_for}\|%{DATA:cookie}\|%{DATA:request_header_user_agent}(\|%{DATA:counter1})?(\|%{DATA:counter2})?\})? (\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?( )?"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?" \[TID\:%{DATA:X_TAIGA_ID}\]( \[SSL:%{DATA:sslv}/%{DATA:sslc}\])?.*$|^%{IP:client_ip}:%{INT:client_port} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:ft} %{NOTSPACE:bk}/%{NOTSPACE:server} %{INT:Tq}/%{INT:Tw}/%{INT:Tc}/%{INT:Tr}/%{NOTSPACE:Tt} %{INT:http_status_code} %{NOTSPACE:BytesRead} (%{NOTSPACE:BytesUpload} )?%{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn}/%{INT:feconn}/%{INT:beconn}/%{INT:srvconn}/%{NOTSPACE:retries} %{INT:srv_queue}/%{INT:backend_queue} (\{%{DATA:captured_request_headers}\|%{DATA:x_forwarded_for}\|%{DATA:cookie}\|%{DATA:request_header_user_agent}\})? (\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?( )?"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?"']
                tag_on_failure => ["_grok_pf_haproxy_notparsed"]
        }

#Grok du compteur StickTable counter1
# Format :
# IpType;ExtType;Farm;cipherType(optionnel);agentType;rateReq10s;nbTMR2h;nbTp24h;rateBp10s

	if [counter1] {
	        grok {
        	        match => ["counter1", '%{WORD:IpType};%{WORD:ExtType};%{WORD:Farm};(%{WORD:cipherType})?;(%{WORD:agentType})?;(%{INT:rateReq10s})?;(%{INT:nbTMR2h})?;(%{INT:nbTp24h})?;(%{INT:rateBp10s})?']
                	tag_on_failure => ["_grok_counter_notparsed"]
        	}
		if "_grok_counter_notparsed" not in [tags] {
			mutate {
                        	convert => ["rateReq10s", "integer"]
                        	convert => ["nbTMR2h", "integer"]
                        	convert => ["nbTp24h", "integer"]
							convert => ["rateBp10sh", "integer"]
							remove_field => [ "counter1" ]
			}
		}
	}

# Reprise Traitement syslogmessage
	mutate{
		add_field => { "error_logstash" => "" }
	}
	if "_grok_pf_haproxy_notparsed" not in [tags] {		
		#correction des types et contenu de champs
			mutate {
				#remove_field => [ "syslogmessage" ]	
				convert => ["Tq", "integer"]
				convert => ["Tw", "integer"]
				convert => ["Tc", "integer"]
				convert => ["Tr", "integer"]
				convert => ["Tt", "integer"]
				convert => ["BytesRead", "integer"]
				convert => ["BytesUpload", "integer"]
				convert => ["backend_queue", "integer"]
				convert => ["srv_queue", "integer"]				
				convert => ["actconn", "integer"]
				convert => ["feconn", "integer"]				
				convert => ["beconn", "integer"]
				convert => ["srvconn", "integer"]				
				gsub  => ["bk","hawaf:",""]
				gsub  => ["ft","hawaf:",""]
				gsub  => ["ft","~",""]
			}			
		#mise a jour du timestamp avec l'info du log
				date {
					match => [ "accept_date" ,"dd/MMM/yyyy:HH:mm:ss.SSS" ]
					remove_field => [ "accept_date", "timestamp", "timestamp8601" ]
				}

		#suppression de champs / Tags inutiles
				mutate {
					remove_tag => [ "_grokparsefailure_sysloginput","_grokparsefailure"]
					remove_field => [ "haproxy_hour","haproxy_milliseconds", "haproxy_minute", "haproxy_month", "haproxy_monthday", "haproxy_second", "haproxy_time", "haproxy_year","facility_label", "severity_label", "id_unused" ]
				}
		
		
		#################################################################################################################################################### GESTION IP
		#Traitement x-forwarded-for > copie du client_ip dans un array client_ips... puis merge avec les x_forwarded_for... 
		#                             puis définition du client_ip sur la derniere ip de client_ips qui n'est pas privé
		mutate {
			copy  => {"x_forwarded_for" => "xforwardedfor"	} 
			copy => {"client_ip" => "client_ips"}   
		}
		mutate {        
			gsub  => ["xforwardedfor","\ ",""]
			split => ["xforwardedfor", ","]	        
			merge => {"client_ips" => "xforwardedfor"	}    
		}
		mutate {      
			#remove_field => [ "xforwardedfor"	]        
		}    
		if [client_ips] {
			ruby {
				code => '								
					event.get("[client_ips]").collect {|ip|
						if !ip.match(/(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)/i) and ip.match(/([0-9]{1,3}\.){3}[0-9]{1,3}/i)
							 event.set("[client_ip]",ip)
						end               
					}'			
			}   		
		}		
				
		#geolocalisation de l'ip src
		if [client_ip] {
			if [client_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
				geoip {
					source => "client_ip"
					database => "/etc/logstash/config/GeoLite2-City.mmdb"
				}
				if ![geoip] {
					geoip {
						source => "client_ip"						
						database => "/etc/logstash/config/GeoLite2-Country.mmdb"
					}
				}
				if ![geoip] {
					geoip {
						source => "client_ip"						
						database => "/etc/logstash/config/GeoLite2-ASN.mmdb"
					}
				}
				#if ![geoip][country_name] and [geoip][continent_code] {
				#	mutate{
				#		add_field => { "geoip[country_name]" => "%{geoip[continent_code]}" }
				#	}
				#}
			#}else{
			#	mutate{
			#		add_field => { "geoip[lan]" => "private" }
			#	}
			}
		}					
				
		if [client_ip] {
		
			cidr {
				add_field => { "client_identifier" => "Frontal OVH"}
				address => [ "%{client_ip}" ]
				network => [ "192.168.51.0/24" ]
			}			
			cidr {
				add_field => { "client_identifier" => "Frontal ARUMTEC"}
				address => [ "%{client_ip}" ]
				network => [ "192.168.81.0/24" ]
			}
			cidr {
				add_field => { "client_identifier" => "Frontal BASTION"}
				address => [ "%{client_ip}" ]
				network => [ "192.168.81.0/24" ]
			}
			cidr {
				add_field => { "client_identifier" => "IP out Mergez ARUMTEC"}
				address => [ "%{client_ip}" ]
				network => [ "192.168.100.0/24" ]
			}					
			cidr {
				add_field => { "client_identifier" => "Montreuil SFR (1G)"}
				address => [ "%{client_ip}" ]
				network => [ "77.159.193.2/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "Montreuil Orange (20M)"}
				address => [ "%{client_ip}" ]
				network => [ "195.101.18.57/29" ]
			}
			cidr {
				add_field => { "client_identifier" => "Angers Mélissa (100M)"}
				address => [ "%{client_ip}" ]
				network => [ "95.141.117.129/28" ]
			}
			cidr {
				add_field => { "client_identifier" => "Angers OVH (VDSL)"}
				address => [ "%{client_ip}" ]
				network => [ "109.190.7.244/32" ]
			}
			cidr {
				add_field => { "client_identifier" => "Valbonne SFR (100M)"}
				address => [ "%{client_ip}" ]
				network => [ "77.158.215.65/28" ]
			}	
			cidr {
				add_field => { "client_identifier" => "Valbonne Alcyonis (ADSL)"}
				address => [ "%{client_ip}" ]
				network => [ "217.64.58.114/30" ]
			}	
			cidr {
				add_field => { "client_identifier" => "Marseille SFR (100M)"}
				address => [ "%{client_ip}" ]
				network => [ "77.158.215.58/29" ]
			}	
			cidr {
				add_field => { "client_identifier" => "Toulouse SFR (100M)"}
				address => [ "%{client_ip}" ]
				network => [ "37.71.136.238/30" ]
			}
			cidr {
				add_field => { "client_identifier" => "Lyon SFR (100M)"}
				address => [ "%{client_ip}" ]
				network => [ "109.3.205.106/30" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - In - Calypso V2 & PPE & Poubelle"}
				address => [ "%{client_ip}" ]
				network => [ "37.59.165.128/28" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - DC Leni"}
				address => [ "%{client_ip}" ]
				network => [ "5.135.85.144/28" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - DC ASP"}
				address => [ "%{client_ip}" ]
				network => [ "5.196.251.96/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - DC FIC"}
				address => [ "%{client_ip}" ]
				network => [ "37.59.77.144/28" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - A définir"}
				address => [ "%{client_ip}" ]
				network => [ "51.255.56.160/28" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - Out - Calypso V2 & PPE & Poubelle"}
				address => [ "%{client_ip}" ]
				network => [ "178.32.76.96/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "OVH - Kermeet"}
				address => [ "%{client_ip}" ]
				network => [ "178.32.156.0/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "ARUMTEC - Calypso V3"}
				address => [ "%{client_ip}" ]
				network => [ "149.7.101.64/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "ARUMTEC - A définir"}
				address => [ "%{client_ip}" ]
				network => [ "149.7.101.48/29" ]
			}
			cidr {
				add_field => { "client_identifier" => "ARUMTEC - Divers"}
				address => [ "%{client_ip}" ]
				network => [ "149.7.101.128/25" ]
			}
			cidr {
				add_field => { "client_identifier" => "ATOS - Calypso V3"}
				address => [ "%{client_ip}" ]
				network => [ "129.185.69.160/27" ]
			}
			cidr {
				add_field => { "client_identifier" => "1&1 - LenZabExt"}
				address => [ "%{client_ip}" ]
				network => [ "82.165.21.87/32" ]
			}
			
		}
		
		#################################################################################################################################################### PARSING X-ROUTING
		if [captured_response_headers] {
			grok {					
				match => ["captured_response_headers", '^SERVICE:(%{DATA:[routing_service_m1]}/)?(%{DATA:[routing_service_m2]}/)?(%{DATA:[routing_service_m3]}/)?(%{DATA:[routing_service_m4]}/)?(%{DATA:[routing_service_m5]})?#7CFRONTAL:(l=%{DATA:[routing_frontal_avg]}/.*/.*/b=%{DATA:[routing_frontal_use]}/D=%{DATA:[routing_frontal_Tt]}/.*)?#7CFERME:%{DATA:[routing_hafarm_ft]}>%{DATA:[routing_hafarm_Tq]}/%{DATA:[routing_hafarm_Tw]}/%{DATA:[routing_hafarm_Tc]}/%{DATA:[routing_hafarm_Tr]}/%{DATA:[routing_hafarm_BytesRead]}>%{DATA:[routing_hafarm_bk]}>%{DATA:[routing_hafarm_server]}#7CHUB:%{DATA:[routing_hahub_ft]}>%{DATA:[routing_hahub_Tq]}/%{DATA:[routing_hahub_Tw]}/%{DATA:[routing_hahub_Tc]}/%{DATA:[routing_hahub_Tr]}/%{DATA:[routing_hahub_BytesRead]}>%{DATA:[routing_hahub_bk]}>%{DATA:[routing_hahub_server]}\|(%{INT:tgAdmin})?$']
				tag_on_failure => ["_grok_response_headers_notparsed"]
			}	
			if "_grok_response_headers_notparsed" not in [tags] {				
				mutate { 
					remove_field => [ "captured_response_headers" ]					
				}				
			    
				mutate {
					gsub => ["[routing_hahub_ft]", "taiga:",""]
					gsub => ["[routing_hahub_bk]", "taiga:",""]
					convert => ["[routing_hahub_Tq]", "integer"]
					convert => ["[routing_hahub_Tw]", "integer"]
					convert => ["[routing_hahub_Tc]", "integer"]
					convert => ["[routing_hahub_Tr]", "integer"]				
					convert => ["[routing_hahub_BytesRead]", "integer"]	

					gsub => ["[routing_hafarm_ft]", "taiga:",""]
					gsub => ["[routing_hafarm_bk]", "taiga:",""]
					gsub => ["[routing_hafarm_bk]", "_http_ipvANY",""]					
					convert => ["[routing_hafarm_Tq]", "integer"]
					convert => ["[routing_hafarm_Tw]", "integer"]
					convert => ["[routing_hafarm_Tc]", "integer"]
					convert => ["[routing_hafarm_Tr]", "integer"]				
					convert => ["[routing_hafarm_BytesRead]", "integer"]		

					convert => ["[routing_frontal_Tt]", "integer"]
					convert => ["[routing_frontal_avg]", "float"]
					convert => ["[routing_frontal_use]", "integer"]
					add_field => ["[routing_hawaf_Latence]", 0]
					add_field => ["[routing_hahub_Latence]", 0]
					add_field => ["[routing_hafarm_Latence]", 0]
					add_field => ["[routing_haproxy_Latence]", 0]
					
					
				}
				#Specifique OVH pour la ferme1... la structure est différente... on redresse pour simuler la gestion HUB > FARM > FRONTAL
				if [routing_hahub_bk] == "ferme1-http" or [routing_hahub_bk] == "ferme1-https" {
					mutate{
						update => { "[routing_hahub_server]" => "FERME1"}					
					}
				}
				if [routing_hahub_server] and [routing_hafarm_server] {
					mutate{
						update => { "[routing_hafarm_server]" => "%{[routing_hahub_server]}_%{[routing_hafarm_server]}"}					
					}
				}
				if [Tr] {
					if [routing_hahub_Tr] {
						ruby {            
						  code => "
							hawaf=event.get('Tr').to_i
							hahub=event.get('[routing_hahub_Tr]').to_i
							event.set('[routing_hawaf_Latence]', hawaf - hahub)						
						  "      
						}  
						if [routing_hafarm_Tr] {
							ruby {            
							  code => "
								hahub=event.get('[routing_hahub_Tr]').to_i
								hafarm=event.get('[routing_hafarm_Tr]').to_i
								event.set('[routing_hahub_Latence]', hahub - hafarm)						
							  "      
							}  
							if [routing_frontal_Tt] {
								ruby {            
								  code => "									
									hafarm=event.get('[routing_hafarm_Tr]').to_i
									frontal=event.get('[routing_frontal_Tt]').to_i
									frontal=frontal / 1000
									event.set('[routing_frontal_Tt]',frontal)
									event.set('[routing_hafarm_Latence]', hafarm - frontal)						
								  "      
								} 
								ruby {            
								  code => "		
									hawaf_latence=event.get('[routing_hawaf_Latence]').to_i
									hahub_latence=event.get('[routing_hahub_Latence]').to_i
									hafarm_latence=event.get('[routing_hafarm_Latence]').to_i									
									event.set('[routing_haproxy_Latence]', hawaf_latence + hahub_latence + hafarm_latence)						
								  "      
								} 
							}
						}
					}
				}
				
				mutate {
					convert => ["[routing_hawaf_Latence]", "integer"]
					convert => ["[routing_hahub_Latence]", "integer"]
					convert => ["[routing_hafarm_Latence]", "integer"]
					convert => ["[routing_haproxy_Latence]", "integer"]
				}
			}else{
				mutate{
					update => { "error_logstash" => "x-routing"}					
				}
			}
		}
		if ![tgAdmin] {
			mutate {
				add_field => ["[routing_hawaf_Latence]", 0]
			}
		}
		#################################################################################################################################################### GESTION COOKIES
		#gestion des cookies 
			if [cookie] {
				kv {
					source => "cookie"
					prefix => "cookie_"
					#trim_key => ";"
					field_split_pattern => ";\ +"
					field_split => "=?"
					include_keys => [ "EOLID","TgHttpSession","TgHttpsSession"]
				}
			}
			
		#################################################################################################################################################### GESTION USER-AGENT
		#gestion du user agent
			if [request_header_user_agent] {
				useragent {
					regexes => "/etc/logstash/config/regexes.yaml"
					source => "request_header_user_agent"
					target => "user-agent"
				}
			}
		
		#################################################################################################################################################### GESTION URI/QUERY/PATH
		#Défini le path, la query et l'extention
			if [http_request] {   
				grok {
					match => [ "http_request", "^%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}$|^%{GREEDYDATA:uri_path}$" ]
				} 
				grok {
					match => [ "uri_path", "^.*\.%{WORD:uri_path_extention}$|^.*\/%{WORD:uri_lastfolder}" ]
				}    
				#Todo : ajouter les tag grokfaillure + reporter sur la fin des filters, si pas de pb (pas de grokfaillure), remove des fields http_request + message...
				mutate { 
					remove_field => [ "http_request" ]
					#remove_field => [ "message" ]
				}
			}
			#défini a vide par défault la query et l'extention
				if ![uri_query] {
					mutate { add_field => { "uri_query" => "" } }
				}
				if ![uri_path_extention] {
					mutate { add_field => { "uri_path_extention" => "" } }
				}
			
			#modif de champs
				mutate {       
				  rename => { "captured_request_headers" => "domain" }
				  lowercase => [ "uri_path_extention" ]
				}
			
			#On défini par défaut que le type de la requête n'est pas connu
				mutate { add_field => { "uri_type" => "unknown" } }
			
			#Définition du type de ressource en fx de l'extention.
				if [uri_path_extention] in ["css", "js", "ico", "gif", "png", "jpg", "jpeg", "svg", "woff", "woff2","otf","eot","ttf","bmp","properties","map"] {
					mutate { update => { "uri_type" => "resources"}}
				}
				if [uri_path_extention] in ["txt","xml","ini","doc","docx","xls","xlsx","html","psd","csv","pdf","zip","json","ics","cfg"] {
					mutate { update => { "uri_type" => "documents"}}
				}
			
			#définition de l'application et tu type de request en fx de celle si
				if [uri_path_extention] in ["","svc","aspx","ashx","axd","asp","","htm","html","php"] {
					mutate { update => { "uri_type" => "request"} }
				}	
			if [uri_type] == "unknown" {
				mutate { update => { "error_logstash" => "type unknown"}}
			}
			mutate {				
				remove_field => [ 
						"captured_response_cookie","captured_request_cookie","type","retries" ,"request_header_user_agent","cookie","sysloghost","server_name","host","frontend_name","pid","program","sysloghostname"		
					]
			}
	}else{
		if [syslogmessage] !~ "^.*SSL\ handshake\ failure$" {
			mutate{
				update => { "error_aloha" => "ssl_fail"}					
			}
		}else{
			mutate{
				update => { "error_logstash" => "hawaf"}					
			}			
		}
		if [sysloghost] == "ARU_10.10.102.250" {
			mutate{
				add_field => { "sysloghostname" => "HARUM1" }
			}
		}else if [sysloghost] == "ARU_10.10.102.251" {
			mutate{
				add_field => { "sysloghostname" => "HARUM2" }
			}
		}else if [sysloghost] == "OVH_192.168.51.111" {
			mutate{
				add_field => { "sysloghostname" => "HAEOLE1" }
			}
		}else if [sysloghost] == "OVH_192.168.51.112" {
			mutate{
				add_field => { "sysloghostname" => "HAEOLE2" }
			}
		}
	}
	#################################################################################################################################################### CLEAN ALL
		
}
output {
	#stdout { codec => rubydebug }
	elasticsearch {
		hosts => ["127.0.0.1:9200"]
		sniffing => true
		manage_template => true
		template_overwrite => true
		template => "/etc/logstash/config/template/hawaf.json"
		template_name => "hawaf"
		index => "hawaf-%{+YYYY.MM.dd}"		
	}
	udp {
		host => "192.168.25.1" # INDEXER_HOSTNAME
		port => "5966"		
		codec => json
	}
}
